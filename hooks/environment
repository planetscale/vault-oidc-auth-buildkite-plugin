#!/bin/bash
# vim: set ft=sh:

set -eou pipefail

declare brown="\033[33m"
declare green="\033[32m"
declare red="\033[31m"
declare reset="\033[0m"

main() {
  local addr="${BUILDKITE_PLUGIN_VAULT_OIDC_AUTH_VAULT_ADDR:-}"
  local path="${BUILDKITE_PLUGIN_VAULT_OIDC_AUTH_PATH:-auth/buildkite}"
  local role="${BUILDKITE_PLUGIN_VAULT_OIDC_AUTH_ROLE:-$BUILDKITE_PIPELINE_SLUG}"
  local audience="${BUILDKITE_PLUGIN_VAULT_OIDC_AUTH_AUDIENCE:-vault}"
  local prefix="${BUILDKITE_PLUGIN_VAULT_OIDC_AUTH_ENV_PREFIX:-}"
  local set_vault_addr="${BUILDKITE_PLUGIN_VAULT_OIDC_AUTH_SET_VAULT_ADDR:-true}"

  local jwt vault_token

  if [[ -z "$addr" ]]; then
    echo -e "~~~ :vault: ${brown}Vault Buildkite OIDC Auth Plugin${reset}. No 'vault_addr' specified. ${red}Skipping Vault authentication.${reset}"
    exit 0
  fi

  jwt=$(buildkite-agent oidc request-token --audience "$audience")

  vault_token=$(vault write \
    -field=token \
    -address="$addr" \
    "${path}/login" \
    role="$role" \
    jwt="$jwt"
  )
  echo -e "~~~ :vault: ${brown}Vault Buildkite OIDC Auth Plugin${reset}: ${green}OK${reset}: ${prefix}VAULT_TOKEN added to the environment."
  export "${prefix}VAULT_TOKEN"="$vault_token"

  if [[ "$set_vault_addr" =~ ^(true|1|yes)$ ]]; then
    export "${prefix}VAULT_ADDR"="$addr"
  fi
}

main "$@"
